---
- name: Create EC2 instances
  hosts: local
  tags: always
  tasks:
    - name: Create db-server EC2 instances
      local_action:
        module: ec2
        key_name: "integration_tests"
        group: "default"
        instance_type: "t2.medium"
        image: "ami-07fd8270"
        region: "eu-west-1"
        wait: yes
        exact_count: 3
        user_data: |
          #cloud-config
          ---
          coreos:
            etcd:
              addr: $private_ipv4:4001
              peer-addr: $private_ipv4:7001
              discovery:
            fleet:
              public-ip: $private_ipv4
            update:
              reboot-strategy: off
            units:
              - name: etcd.service
                command: start
              - name: fleet.service
                command: start
              - name: format-ebs.service
                command: start
                content: |
                  [Unit]
                  Description=Formats the ebs drives
                  [Service]
                  Type=oneshot
                  RemainAfterExit=yes
                  ExecStart=/usr/sbin/wipefs -f /dev/xvdf
                  ExecStart=/usr/sbin/mkfs.btrfs -f /dev/xvdf
              - name: var-lib-cassandra.mount
                command: start
                content: |
                  [Unit]
                  Description=Mount drive to /var/lib/cassandra
                  Requires=format-ebs.service
                  After=format-ebs.service
                  Before=docker.service
                  [Mount]
                  What=/dev/xvdf
                  Where=/var/lib/cassandra
                  Type=btrfs
        count_tag:
          Name: "db-server"
        instance_tags:
          Name: "db-server"
          type: coreos
        volumes:
          - device_name: /dev/xvdf
            device_type: gp2
            volume_size: 30
      register: ec2

    - name: Add db-server to coreos group
      local_action: add_host >
        hostname={{ item.public_dns_name }}
        groupname=coreos
        id={{ item.id }}
        test_ip={{ item.public_dns_name }}
      with_items: ec2.tagged_instances

    - name: Add db-server to host groups
      local_action: add_host >
        hostname={{ item[0].public_dns_name }}
        groupname={{ item[1] }}
        id={{ item[0].id }}
        test_ip={{ item[0].public_dns_name }}
      with_nested:
        - ec2.tagged_instances
        - ['haproxy', 'redis', 'cassandra']

    - name: Create app-server EC2 instances
      local_action:
        module: ec2
        key_name: "integration_tests"
        group: "default"
        instance_type: "t2.medium"
        image: "ami-07fd8270"
        region: "eu-west-1"
        wait: yes
        exact_count: 3
        user_data: |
          #cloud-config
          ---
          coreos:
            etcd:
              addr: $private_ipv4:4001
              peer-addr: $private_ipv4:7001
              discovery:
            fleet:
              public-ip: $private_ipv4
            update:
              reboot-strategy: off
            units:
              - name: etcd.service
                command: start
              - name: fleet.service
                command: start
        count_tag:
          Name: "app-server"
        instance_tags:
          Name: "app-server"
          type: coreos
      register: ec2

    - name: Add app-server to coreos group
      local_action: add_host >
        hostname={{ item.public_dns_name }}
        groupname=coreos
        id={{ item.id }}
        test_ip={{ item.public_dns_name }}
      with_items: ec2.tagged_instances

    - name: Add app-server to host groups
      local_action: add_host >
        hostname={{ item[0].public_dns_name }}
        groupname={{ item[1] }}
        id={{ item[0].id }}
        test_ip={{ item[0].public_dns_name }}
      with_nested:
        - ec2.tagged_instances
        - ['auth-plus', 'auth-plus-auth', 'device-info']

    - name: Wait for instances to be available
      local_action: wait_for host={{ item }} port=22 delay=5 timeout=320 state=started
      with_items: groups.coreos

- name: bootstrap
  hosts: coreos
  tags: bootstrap
  gather_facts: False
  roles:
    - defunctzombie.coreos-bootstrap
  tasks:
    - name: install docker-py
      pip: name=docker-py version="1.2.3"
    - name: install httplib2
      pip: name=httplib2 version="0.9.1"

- name: login to docker hub
  hosts: coreos
  tags: bootstrap
  tasks:
  - name: login into Docker Hub
    raw: docker login -u "atsjenkins" -p "{{ lookup('env', 'DOCKER_PASSWORD') }}" -e "jenkins@advancedtelematic.com"

- name: Deploy cassandra
  hosts: cassandra
  tags: cassandra
  tasks:
    - name: Pull the cassandra image
      raw: docker pull cassandra

    - name: Launch cassandra
      docker:
        image: cassandra
        name: cassandra
        state: reloaded
        ports: ['9042:9042', '9160:9160', '7000:7000']
        expose: ['9042', '9160', '7000']
        restart_policy: always

    - name: Wait for cassandra
      wait_for: host=localhost port=9042 delay=30 timeout=60 state=started

- name: Deploy haproxy
  hosts: haproxy
  tags: haproxy
  tasks:
    - name: Pull the haproxy image
      raw: docker pull haproxy

    - name: Upload haproxy.cfg
      sudo: True
      template:
        src: haproxy.cfg
        dest: /etc/haproxy.cfg

    - name: Launch haproxy
      docker:
        image: haproxy
        name: haproxy
        state: reloaded
        ports: ['80:80']
        expose: ['80']
        volumes: ['/etc/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro']
        restart_policy: always

