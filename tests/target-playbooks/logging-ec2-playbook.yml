
- name: Create EC2 instances
  hosts: local
  tags: always
  tasks:
    - name: Create app-server EC2 instances
      register: ec2
      local_action:
        module: ec2
        key_name: "integration_tests"
        group: "ats-demo"
        instance_type: "t2.medium"
        image: "ami-07fd8270"
        region: "eu-west-1"
        wait: yes
        exact_count: 1
        user_data: |
          #cloud-config
          ---
          coreos:
            etcd:
              addr: $private_ipv4:4001
              peer-addr: $private_ipv4:7001
              discovery:
            fleet:
              public-ip: $private_ipv4
            update:
              reboot-strategy: off
            units:
              - name: etcd.service
                command: start
              - name: fleet.service
                command: start
              - name: format-ebs.service
                command: start
                content: |
                  [Unit]
                  Description=Formats the ebs drives
                  [Service]
                  Type=oneshot
                  RemainAfterExit=yes
                  ExecStart=/usr/sbin/wipefs -f /dev/xvdf
                  ExecStart=/usr/sbin/mkfs.btrfs -f /dev/xvdf
              - name: mnt.mount
                command: start
                content: |
                  [Unit]
                  Description=Mount drive to /mnt
                  Requires=format-ebs.service
                  After=format-ebs.service
                  Before=docker.service
                  [Mount]
                  What=/dev/xvdf
                  Where=/mnt
                  Type=btrfs
        count_tag:
          Name: "app-server"
        instance_tags:
          Name: "app-server"
          type: coreos

        volumes:
          - device_name: /dev/xvdf
            device_type: gp2
            volume_size: 30


    - name: Add app-server to coreos group
      local_action: add_host >
        hostname={{ item.public_dns_name }}
        groupname=coreos
        id={{ item.id }}
        test_ip={{ item.public_dns_name }}
      with_items: ec2.tagged_instances

    - name: Add app-server to host groups
      local_action: add_host >
        hostname={{ item[0].public_dns_name }}
        groupname={{ item[1] }}
        id={{ item[0].id }}
        test_ip={{ item[0].public_dns_name }}
      with_nested:
        - ec2.tagged_instances
        - ['logspout', 'someapp']

    - name: Create haproxy-server EC2 instances
      register: ec2
      local_action:
        module: ec2
        key_name: "integration_tests"
        group: "ats-demo"
        instance_type: "t2.medium"
        image: "ami-07fd8270"
        region: "eu-west-1"
        wait: yes
        exact_count: 1
        user_data: |
          #cloud-config
          ---
          coreos:
            etcd:
              addr: $private_ipv4:4001
              peer-addr: $private_ipv4:7001
              discovery:
            fleet:
              public-ip: $private_ipv4
            update:
              reboot-strategy: off
            units:
              - name: etcd.service
                command: start
              - name: fleet.service
                command: start
              - name: format-ebs.service
                command: start
                content: |
                  [Unit]
                  Description=Formats the ebs drives
                  [Service]
                  Type=oneshot
                  RemainAfterExit=yes
                  ExecStart=/usr/sbin/wipefs -f /dev/xvdf
                  ExecStart=/usr/sbin/mkfs.btrfs -f /dev/xvdf
              - name: mnt.mount
                command: start
                content: |
                  [Unit]
                  Description=Mount drive to /mnt
                  Requires=format-ebs.service
                  After=format-ebs.service
                  Before=docker.service
                  [Mount]
                  What=/dev/xvdf
                  Where=/mnt
                  Type=btrfs
        count_tag:
          Name: "haproxy-server"
        instance_tags:
          Name: "haproxy-server"
          type: coreos

        volumes:
          - device_name: /dev/xvdf
            device_type: gp2
            volume_size: 30


    - name: Add haproxy-server to coreos group
      local_action: add_host >
        hostname={{ item.public_dns_name }}
        groupname=coreos
        id={{ item.id }}
        test_ip={{ item.public_dns_name }}
      with_items: ec2.tagged_instances

    - name: Add haproxy-server to host groups
      local_action: add_host >
        hostname={{ item[0].public_dns_name }}
        groupname={{ item[1] }}
        id={{ item[0].id }}
        test_ip={{ item[0].public_dns_name }}
      with_nested:
        - ec2.tagged_instances
        - ['elasticsearch', 'logstash', 'logspout', 'kibana', 'haproxy']

    - name: Wait for instances to be available
      local_action: wait_for host={{ item }} port=22 delay=5 timeout=320 state=started
      with_items: groups.coreos

- name: bootstrap
  hosts: coreos
  tags: bootstrap
  gather_facts: False
  roles:
    - defunctzombie.coreos-bootstrap
  tasks:
    - name: install docker-py
      pip: name=docker-py version="0.6.0"
    - name: install httplib2
      pip: name=httplib2 version="0.9.1"

- name: login to docker hub
  hosts: coreos
  tags: bootstrap
  tasks:
  - name: login into Docker Hub
    raw: docker login -u "atsjenkins" -p "{{ lookup('env', 'DOCKER_PASSWORD') }}" -e "jenkins@advancedtelematic.com"


- name: Deploy elasticsearch
  hosts: elasticsearch
  tags: elasticsearch
  tasks:
    - name: Pull the elasticsearch image
      raw: docker pull nathanleclaire/elasticsearch:43d2b4f914a192d0de221cb744dab665b07f1268



    - name: Launch elasticsearch
      docker:
        image: nathanleclaire/elasticsearch:43d2b4f914a192d0de221cb744dab665b07f1268
        name: elasticsearch
        state: reloaded
        ports: ['9200:9200', '9300:9300']
        expose: ['9200', '9300']

- name: Deploy logstash
  hosts: logstash
  tags: logstash
  tasks:
    - name: Pull the logstash image
      raw: docker pull advancedtelematic/logstash



    - name: Launch logstash
      docker:
        image: advancedtelematic/logstash
        name: logstash
        state: reloaded
        command: "-f /etc/logstash.sample.conf"
        ports: ['5000:5000', '5000:5000/udp']
        expose: ['5000', '5000', '5000/udp']
        env: {'ELASTICSEARCH_HOST': '{{ groups.haproxy[0] }}', 'LOGSPOUT': 'ignore', 'ELASTICSEARCH_PORT_9200_TCP_ADDR': '{{ groups.haproxy[0] }}', 'ELASTICSEARCH_PORT': 9200}

- name: Deploy logspout
  hosts: logspout
  tags: logspout
  tasks:
    - name: Pull the logspout image
      raw: docker pull advancedtelematic/logspout



    - name: Launch logspout
      docker:
        image: advancedtelematic/logspout
        name: logspout
        state: reloaded
        command: "/bin/sh -c '/bin/logspout syslog://$LOGSTASH_PORT_5000_TCP_ADDR:5000'"
        volumes: ['/var/run/docker.sock:/var/run/docker.sock']
        env: {'DEBUG': 'true', 'LOGSTASH_PORT_5000_TCP_ADDR': '{{ groups.haproxy[0] }}', 'LOGSTASH_HOST': '{{ groups.haproxy[0] }}', 'LOGSTASH_PORT': 5000}

- name: Deploy kibana
  hosts: kibana
  tags: kibana
  tasks:
    - name: Pull the kibana image
      raw: docker pull nathanleclaire/kibana:43d2b4f914a192d0de221cb744dab665b07f1268



    - name: Launch kibana
      docker:
        image: nathanleclaire/kibana:43d2b4f914a192d0de221cb744dab665b07f1268
        name: kibana
        state: reloaded
        ports: ['5454:80']
        expose: ['80']

- name: Deploy haproxy
  hosts: haproxy
  tags: haproxy
  tasks:
    - name: Pull the haproxy image
      raw: docker pull haproxy

    - name: Upload haproxy.cfg.j2
      sudo: True
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy.cfg


    - name: Launch haproxy
      docker:
        image: haproxy
        name: haproxy
        state: reloaded
        ports: ['80:80']
        expose: ['80']
        volumes: ['/etc/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro']

- name: Deploy someapp
  hosts: someapp
  tags: someapp
  tasks:
    - name: Pull the someapp image
      raw: docker pull someone/something



    - name: Launch someapp
      docker:
        image: someone/something
        name: someapp
        state: reloaded


